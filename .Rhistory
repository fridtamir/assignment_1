a <- available.packages()
show a
a
head(rownames(a),3)
install.packages(slidify)
install.packages("slidify"")
install.packages("slidify")
install.packages("slidify")
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot2)
search()
install.packages("KernSmooth")
library(KernSmooth)
getwd
getwd()
getwd()
isTRUE(3)
isTRUE(NA)
identical(xor, 'xo')
identical(xor, 'xor')
!!TRUE
!!FALSE
all(c(TRUE, FALSE, TRUE))
list(1, 2, 3)
names(list) <- c("town", "home", "lad"
)
names(list) <- c("town", "home", "lad")
l <- list(1, 2, 3)
names(l) <- c("town", "home", "lad")
l
l[town]
l["town"]
l$town
list("town"=5, "gil"= 3)
getwd()
setwd("~/Documents/Data Science Specialization/R Directory")
getwd()
setwd("~/Documents/Data_Science_Specialization/R_Directory")
getwd
getwd()
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
x <- list(a = 1:5, b = rnorm(10))
x
lapply(x, mean)
mean(x)
mean(x$a, x$b)
mean(x$a)
mean(x$b)
l <- 1:4
l
lapply(l, runif)
mat <- list (a = matrix(1:4, 2, 2), b = matrix(1:6, 3,2))
mat
lapply(mat, function(elt) elt[,1])
sapply(x, mean)
saplly(l, mean)
saplly(li, mean)
li <- list(a = 1:4, b = rnorm(10), c = rnorm(20,1), d = rnorm(100, 5))
lapply(li, mean)
sapply(li, mean)
new <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(new, 2, mean)
header(new)
head(new)
apply(new, 1, mean)
colMeans(new)
apply(new, 2, mean)
apply(new, quantile, prob = (0.25, 0.75))
apply(new, quantile, prob = c(0.25, 0.75))
apply(new, quantile, probs = c(0.25, 0.75))
apply(new, 1, quantile, probs = c(0.25, 0.75))
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
a
apply(a, c(2, 2), mean)
apply(a, c(1, 2), mean)
l <- list(rep(1, 4), rep(2, 3), rep(3, 2), rep(4, 1))
l
mapply(rep, 1:4, 4:1)
noise <- function(n, mean, sd) {
rnorm(n, mean, sd)}
norm(5, 1, 2)
noise(5, 1, 2)
rnorm(5, 1, 2)
noise(1:5, 1:5, 2)
mapply(noise, 1:5, 1;5, 2)
mapply(noise, 1:5, 1:5, 2)
mapply(noise, 1:5, 1:5, 2:4)
mapply(noise, 1:5, 1:5, 2:6)
mapply(noise, 1:5, 1:5, 2:7)
mapply(noise, 1:5, 1:5, 2:7)
mapply(noise, 1:5, 1:5, 2:6)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
?gl
f <- gl(3, 10)
class(f)
f
tapply(x, f, mean)
lapply(x, mean)
x
?lapply
tapply(x, f, range)
tapply(x, f, range, simplify = FALSE)
tapply(x, f, range, simplify = TRUE)
split(x, d)
split(x, f)
class(x)
class(d)
class(f)
class(split(x, f))
class(split(x, f)$3)
class(split(x, f)$`3`)
tapply(x, f, mean)
tapply(x, f, mean, simplify = FALSE)
lapply(split(x, f), mean)
x <- rnorm(10)
f1 <- gl(2, 5)
f2 <- gl (5, 2)
f2
interaction(f1, f2)
x
split(x,list(f1, f2))
split(x, f1)
split (x, f2)
split(x,list(f1, f2), drop = TRUE)
mean(ldl)
traceback()
?lm
lm(ldl - mo)
traceback()
dbug(lm)
debug(lm)
lm(ldl - mo)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(5)
getmean()
m
x
makeVector(10)
makeVector(10, 5)
makeVector(c(10, 5)
)
v <- c(rnorm(10))
v
makeVector(v)
y <- 5
makeVector(v)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(v)
x
myVector <- makeVector(1:15)
myVector
myVector(v)
myVector$get(v)
myVector$set(v)
myVector$get(v)
myVector$set(v)
x
v
myVector$get()
myVector <- makeVector(1:15)
myVector$get()
myVector$getmean()
myVector$set()
myVector$setmean()
myVector$set(1:20)
myVector$getmean()
myVector$get()
myVector$setmean(1:20)
myVector$getmean()
x
aVector <- makeVector(1:10)
aVector$set(30:40)
cachemean(aVector)
aVector$getmean()
?list
godzila <- function(x = numeric()) {
mean(x)
d <- function(y){
x <<- median(y)
}
}
h <- godzila(1:15)
h$d(5:10)
godzila <- function(x = numeric()) {
mean(x)
d <- function(y){
x <<- median(y)
}
list(d = d)
}
h$d(5:10)
h <- godzila(1:15)
h$d(5:10)
print (h$d(5:10))
x <- seq(0, 2 * pi, length = 100)
sinx <- sin(x)
plot(x, sinx, type = "l")
?seq
seq(0, 2, length = 100)
x <- seq(0, 2 * pi, length = 100)
sinx <- sin(x)
plot(x, sinx, type = "l")
2 * pi
mat <- matrix(1:4, 2, 2)
mat
solve(mat)
mat ** solve(mat)
mat * solve(mat)
mat %*% solve(mat)
